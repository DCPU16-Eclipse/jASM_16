/**
 * Copyright 2012 Tobias Gierke <tobias.gierke@code-sourcery.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.codesourcery.jasm16.ast;

import java.io.IOException;

import de.codesourcery.jasm16.compiler.ICompilationContext;
import de.codesourcery.jasm16.compiler.ISymbolTable;
import de.codesourcery.jasm16.compiler.io.IObjectCodeWriter;
import de.codesourcery.jasm16.exceptions.ParseException;

/**
 * Abstract base-class for AST nodes that generate object code.
 * 
 * @author tobias.gierke@voipfuture.com
 */
public abstract class ObjectCodeOutputNode extends ASTNode
{
    public static final int UNKNOWN_SIZE = -1;
    
    public ObjectCodeOutputNode() {
    }
    
    /**
     * Invoked after symbols have been associated with their values.
     * 
     * Note that this method may be called multiple times because associating
     * labels with addresses requires two compilation phases (before and after constant folding)
     * and other AST nodes may output different object code each time so the label's addresses may shift.
     * 
     * @param symbolTable
     */
    public abstract void symbolsResolved(ISymbolTable symbolTable);
    
    /**
     * Returns the size of the object code generated by this node
     * in bytes.
     * 
     * @return size in bytes or {@link #UNKNOWN_SIZE} if this node doesn't know
     * how to calculate it's size (either because {@link #symbolsResolved(ISymbolTable)} has not been
     * called yet or this AST node didn't parse correctly).
     * 
     * @see #symbolsResolved(ISymbolTable)
     */
    public abstract int getSizeInBytes();
    
    /**
     * Write this node's object code.
     * 
     * @param writer
     * @param compContext TODO
     * @throws IOException
     * @throws ParseException
     */
    public abstract void writeObjectCode(IObjectCodeWriter writer, ICompilationContext compContext) throws IOException,ParseException;
}
